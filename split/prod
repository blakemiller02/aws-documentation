Control Tower was set up and enabled on organization to streamline account creation and management. In my particular situation, the parent account was not enrolled in control tower due to data ingress concerns.
Multiple accounts were created via Control Tower to host new environments. Multiple OUs were created as well to host these new environments. Prod environment was put into its own OU alongside Dev.
Prod environment was enrolled in Control Tower as soon as it was created. For the sake of efficiency in having the environment ready, default SCPs were left in place to be revisited at a later time.
Resource explorer was enabled and ran in parent environment to determine all resources that need to be migrated to the new environments. 
The first step in reprovisioning all of the resources in the new environment was to determine how to spin up the resources in bulk. The answer is CloudFormation. All that is left is to make the template.
Former2 is a third party tool that scans your AWS account for resources and generates a CloudFormation template based on resources you choose to be added. All you need is an account with ReadOnlyAccess and access keys.
Attach your account to Former2 and then scan your account. Then, choose resources that you want to be a part of the CloudFormations stack template. S3 buckets should not be spun up in this manner for the names need to be unique.
For testing purposes, I chose an EC2 instance that I created as a test. In order to have the EC2 instance working, you need to also create a VPC, Subnet, Route Table, Internet Gateway, Route, and a Public IPv4 address.
When creating the EC2, it will ask about a security group, this defines ACLs and other access rules. You can create your own but for testing purposes, we allow 0.0.0.0/0 to connect (not advised).
When creating a VPC, you can opt to create a Subent and Route Table at the same time that automatically attach to each other. That leaves you with the Internet Gateway (IGW), the Route, and the public address.
The IGW can be spun up using default settings or any settings of your choice, the important thing here is to configure the route to forward traffic into the IGW. After that, you can allocate a public IPv4 address.
AWS uses Elastic IPs for IP addressing. This means that the address can be reallocated or changed with ease. Allocate an address and then attach it either to the instance itself or a network interface (if needed).
Now that the EC2 instance is running and networked, it can be copied into a CloudFormation stack. Go to Former2 and find your EC2 instance alongside: Subnet, IGW, Route Table, VPC, and Security Group. Add all these to the template.
Generate the template, then copy it and paste it into a word processor. I used Notepad++ for my testing. Save the template as a .YAML file. Look through it to make sure the linking names are not direct references.
Under Subnet, Route Table, and IGW, they will reference the VPC they're being attached to. Make sure the name is !Ref EC2VPC. This tells the stack to use the name of whatever VPC is generated by CloudFormation.
Ensure that everything else is set to !Ref "name" instead of direct references. One last thing to check for is availability zones. Make sure they align with what you currently use. The format is typically {aws_region}[a-f].
Go to the Prod account, open CloudFormation, click create stack with new resources. Choose template is ready, upload your template from wherever it is saved. Configure the settings for creation to your liking, there is no right answer.
If the stack doesn't successfully generate, check where it is going awry. Once you are able to locate and remediate the issue, you will want to go check to make sure the networking is set correctly. 
The most common networking items you will need to configure are recreating the route from the instance to the IGW as well as recreating an elastic IPv4 address. Once all this is configured, ensure that the EC2 instance works. 
If there are any issues with it, the Reachability Analyzer is a great tool to discover where the connection dropped along the way. In my testing, I discovered that Control Tower created a couple VPCs and made them default.
This caused an issue where, when the stack said !Ref EC2VPC, it referenced the default VPC. This VPC did not have an IGW attached so the reachability analyzer told me the connection never reached the IGW. 
The bandaid solution was to swap the IGW to the default VPC. The correct solution would be to change the VPC that was attached to the instance. This can all be done when you are doing live transfers, however.
Once the EC2 instance is up an running, the next item to do is to transfer your data from source EC2 to destination EC2. 
